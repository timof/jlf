
conventions for identifiers (php, sql, cgi) and reserved parameter names with special meaning:

* first character of any identifier should be a lower-case letter.
  upper case and underscore are reserved for special purposes (see below)
  camelCase or underscores may be used inside an identifier

* single letter identifiers are reserved and must not be used in application code as cgi parameter names

* early cgi parameters: treated as special cases in global.php: they are required before we have a session and
  thus before general parameter sanitization can be applied:
  - l ('login'): used to supply a single short piece of information required very early
  - f ('format'): the global format: determines, among other things, the http header 'Content-Type' setting
  - d: 'dontcache': a nonce to prevent pulling an outdated page out of some cache
  - m ('me'): script,parent_script,window,parent_window,thread,parent_thread
       (parents are optional and default to child; parent_script === 'self' has special meaning)
  - c ('cookie'): url-cookie (for clients which don't support browser cookies)
  - i ('item'): stored as global $deliverable; determines deliverable item to download
  - n ('name'): suggested name for saving a downloaded document, hex-encoded
  - r ('robot'): set by browser config if robots.txt was requested (such requests get redirected to index.php?r=1)

* other special / reserved cgi parameters:
  - s: used to POST arbitrary parameters, serialized, in any existing <form>
  - q: synomym for s, will override s; used in <button> to POST arbitrary parameters
  - offs: POST scroll offset in 'self'-links (always through 'update_form')
  - debug: bit field to toggle debug options
  - action: POST parameter to request an action; 'nop' and '' are always allowed
  - message (deprecated): can be used to pass numerical information (often: a primary key) related to $action
  - itan: indexed TAN to catch re-POSTing of forms

* prefixes supported for all cgi parameters except some early ones:
  - P<n>_: priority prefix: P3_x and P7_x can both be used to pass x; if both are passed, P7_x will win. names without priority prefix are treated like P0_
  - OR<n>_: if O3_x and O7_x are passed, the values will be OR-ed together in x (useful for <checkbox> lists)
  - UID_: use value as key to lookup value in uid table
  - DEREF_: passing DEREF_x=y and y=foo will set x=foo
  for the time being, prefixes cannot be combined - only one per variable will work reliably

* sql identifiers:
  - table names must not contain underscores and must start with lower-case letter; use camelCase for structuring names if needed
  - column names of the form <prefix>_id are pointers; <prefix> must be of the form <tablename> or <whatever>_<tablename>


forms:

scripts:

index.php
  code/config.php
  sub/start.php
    code/environment.php   // setup environment: define functions, global vars, constants, but avoid executing complex code
      code/err_functions.php
      code/basic.php
      sub/basic.php
      code/global.php
      code/html.php
      code/login.php
      code/structure.php
      sub/structure.php
      sub/inlinks.php
      code/inlinks.php
      sub/mysql.php
      code/mysql.php
      sub/html.php
      sub/views.php
      code/views.php
      sub/gadgets.php
      code/gadgets.php
      code/tex2pdf.php       // only if $global_format === 'pdf'
      code/leitvariable.php
      sub/leitvariable.php
    sub/common.php  // perform common initializations which depend on standard environment being available
    sub/head.php
    sub/window/script.php
    sub/foot.php
