<?php
  header( 'Content-Type: text/javascript' );
//  require_once( '../code/js.rphp' );
?>


function jsdebug( m ) {
  if( ( field = $('jsdebug') ) ) {
    field.firstChild.data = ' [' + m + ']';
  }
}


var theBody, theHeader, theOutback, theSidenav, thePayload, theFooter, theUninav;

function js_init() {
  theBody = $('theBody');
  theHeader = $('theHeader');
  theUninav = $('theUninav');
  theOutback = $('theOutback');
  theSidenav = $('theSidenav');
  thePayload = $('thePayload');
  theFooter = $('theFooter');

  resizeHandler();
  window.onresize = resizeHandler;
}


function resizeHandler() {
  var wh, ww, voffs, box;

  wh = window.innerHeight;
  ww = window.innerWidth;

  theHeader.style.position = 'fixed';
  theUninav.style.position = 'fixed';
  theUninav.style.top = '0';
  theUninav.style.right = '0';
  theUninav.style.zIndex = '30';
  // theOutback.style.position = 'fixed';
  theFooter.style.position = 'fixed';
  // theSidenav.style.position = 'fixed';
  thePayload.style.position = 'absolute';
  voffs = 0;
  if( theHeader ) {
    theHeader.style.width = theHeader.style.min_width = theHeader.style.max_width = ww;
    wh -= ( voffs = theHeader.offsetHeight );
  }
  if( theFooter ) {
    theFooter.style.width = theFooter.style.min_width = theFooter.style.max_width = ww;
    wh -= theFooter.offsetHeight;
  }

  // note: offsetHeight == height + padding!
  theOutback.style.width = theOutback.style.min_width = theOutback.style.max_width = ww;
  outbackHeight = theOutback.style.height = theOutback.style.min_height = theOutback.style.max_height = wh;
  // theOutback.style.top = voffs;
  // jsdebug( 'resizeHandler: ' + wh + ',' + ww + ',' + voffs + ',' + thePayload.offsetHeight );

  if( theSidenav ) {
    ww -= theSidenav.offsetWidth;
  }
}


function on_change( tag, envs ) {
  return true;
}

function warn_if_unsaved_changes() {
  return true;
}


function get_window_offs() {
  var xoff, yoff;
  xoff = theOutback.scrollLeft;
  yoff = theOutback.scrollTop;
  return xoff + 'x' + yoff;
}

function do_on_submit( id ) {
  var f;
  f = document.forms.update_form;
  if( f ) {
    if( f.elements.offs ) {
      f.elements.offs.value = get_window_offs();
    }
  }
  return true;
}

// function register_on_submit( id, expression ) {
//   var todo = todo_on_submit[ id ];
//   todo[ todo.length ] = expression;
// }

// submit_form(): submit form id, POSTing s and l
// - s is used to pass arbitrary parameters, serialized
// - l can be used to pass a single short piece of information to be evaluated very early in the target script
//
function submit_form( id, s, l ) {
  var f, uf, t;
  f = document.forms[ id ];
  uf = null;
  if( s )
    f.elements.s.value = s;
  if( l )
    f.elements.l.value = l;
  if( f.target && ( f.target != window.name ) ) { // whether to update this window too
    // need to assign uf here: document may change after window.open().focus() which may be ...
    uf = document.forms.update_form;
  }
  if( f.onsubmit ) {
    if( ! f.onsubmit() ) // ... called here!
      return;
  }
  if( uf ) {
    uf.submit();
  }
  f.submit();
}

// function submit_input( id, name ) {
//   var i = $( 'input_' + id );
//   if( ! name )
//     name = i.name;
//   // if( confirm( name + ': ' + i.value ) )
//     submit_form( 'update_form', '', name, i.value );
// }

function load_url( url, window_name, window_options ) {
  url = url + '&offs=' + get_window_offs();
  url = url.replace( /&amp;/g, '&' );
  if( window_name ) {
    openwindow( url, window_name, window_options, true );
  } else {
    self.location.href = url;
  }
}

function nobubble( e ) {
  if( ! e )
    e = window.event;
  if( e.stopPropagation ) {
    e.stopPropagation();
  } else if( e.cancelBubble ) {
    e.cancelBubble();
  }
}

function openwindow( url, name, opts, focus ) {
  var w;

  if( name == 'NOWINDOW' )
    return false;

  w = window.open( url, name, opts );

  if( w ) {
    if( focus ) {
      w.focus();
    }
    return w;
  } else {
    alert_popup( 'failed to open new browser window - maybe you need to allow popups?' );
    return false;
  }
}


////////////////////
// popups
// <div class=floatingframe>
//   <div class=floatingpayload popup>
//   <div class=shadow>
////////////////////

var popup_counter = 0;
var popup_do_fadeout = 0;
var active_popup = false;

function fade_popup() {
  if( ! active_popup )
    return;
  var frame = $( active_popup );

  if( popup_counter > 0 ) {
    var c1 = 'fedcba'.substr( popup_counter / 4, 1 );
    var c2 = 'fb73'.substr( popup_counter % 4, 1 );
    var color = '#'+c1+c2+c1+c2+c1+c2;
    theBody.style.backgroundColor = color;
    thePayload.style.backgroundColor = color;

    frame.style.opacity = popup_counter / 20.0;
    thePayload.style.opacity = 1.0 - popup_counter / 50.0;
    frame.style.display = 'block';
  } else {
    frame.style.display = 'none';
    theBody.style.backgroundColor = '#ffffff'
    thePayload.style.backgroundColor = '#ffffff'
  }

  if( popup_do_fadeout ) {
    if( popup_counter > 0 ) {
      popup_counter--;
      setTimeout( "fade_popup();", 10 );
    } else {
      frame.style.display = 'none';
      active_popup = false;
    }
  } else {
    if( popup_counter <= 20 ) {
      popup_counter++;
      setTimeout( "fade_popup();", 10 );
    }
  }
}

function show_popup( popup_id ) {
  if( active_popup )
    return;

  var frame = $( popup_id );

  frame.style.visibility = 'hidden';
  frame.style.opacity = '0.0';
  frame.style.position = 'fixed';
  frame.style.top = '0';
  frame.style.left = '0';
  frame.style.display = 'inline-block';

  var payload = frame.select('.floatingpayload.popup')[0];
  var shadow = frame.select('.shadow')[0];
  payload.style.visibility = 'visible';
  payload.style.display = 'inline-block';

  var width = payload.getWidth();
  var height = payload.getHeight();
  shadow.style.width = shadow.style.min_width = shadow.style.max_width = width;
  shadow.style.height = shadow.style.min_height = shadow.style.max_height = height;
  
  var tables = payload.select('.table.buttons');
  var i;
  for( i = 0; i < tables.length; i++ ) {
    tables[ i ].style.width = width;
  };

  center( popup_id );
  frame.style.visibility = 'visible';
  active_popup = popup_id;
  popup_do_fadeout = 0;
  fade_popup();
}

function hide_popup() {
  popup_do_fadeout = 1;
  fade_popup();
}

function alert_popup( m ) {
  $('alertpopuptext').innerHTML = m;
  show_popup('alertpopup');
}

function center( id ) {
  var box, xoff, yoff;

  box = $( id );
  box.style.position = 'fixed';
  // jsdebug( source.getWidth() );
  yoff = ( window.innerHeight - box.getHeight() ) / 2;
  xoff = ( window.innerWidth - box.getWidth() ) / 2;
  box.style.top = ( ( yoff < 10 ) ? 10 : yoff );
  box.style.left = ( ( xoff < 10 ) ? 10 : xoff );
}


/////////////////
// dropdowns
/////////////////

var overdropdownlink = false;
var overdropdownbox = false;

var activedropdown = false;
var wantdropdown = false;
var dropdowncount = 0;

function mouseoverdropdownlink( id ) {
  overdropdownlink = id;
  handle_dropdown();
}
function mouseoverdropdownbox( id ) {
  overdropdownbox = id;
  handle_dropdown();
}

function mouseoutdropdownlink( id ) {
  if( overdropdownlink == id )
    overdropdownlink = false;
  handle_dropdown();
}
function mouseoutdropdownbox( id ) {
  if( overdropdownbox == id )
    overdropdownbox = false;
  handle_dropdown();
}

function fadeout_dropdown() {
  if( ! activedropdown )
    return;
  d = $( activedropdown );
  if( dropdowncount > 0 ) {
    dropdowncount--;
    d.style.opacity = dropdowncount / 11.0;
    window.setTimeout( 'handle_dropdown();', 30 );
  } else {
    d.style.display = 'none';
    activedropdown = false;
    if( wantdropdown ) {
      handle_dropdown();
    }
  }
}
function fadein_dropdown() {
  if( ! activedropdown )
    return;
  d = $( activedropdown );
  if( dropdowncount < 10 ) {
    dropdowncount++;
    d.style.opacity = dropdowncount / 11.0;
    d.style.display = 'block';
    window.setTimeout( 'handle_dropdown();', 30 );
  }
}

var dropdowns = Object();

function init_dropdown() {
  if( ! wantdropdown )
    return;

  var frame = $( wantdropdown );
  var payload = frame.select('.floatingpayload.dropdown')[0];
  var list = payload.select('.dropdownlist')[0];
  var shadow = frame.select('.shadow')[0];
  var link = frame.parentNode;
  var width, height, headerheight;

  frame.style.visibility = 'hidden';
  frame.style.display = 'block';

  // initially, dropdown items are invisible, fixed, so
  // - their dimensions can be obtained individually
  // - they are stacked on top of each other so they don't cause scrollbars on the viewport
  // we retrieve and store the dimensions once, then switch to 'visible, static' with 'display=none'
  if( ! dropdowns[ wantdropdown ] ) {
    var w = 0;
    var h = 0;
    var i, items, header, headerheight;
    var itemHeights = new Array();

    header = payload.select('.dropdownheader');
    if( header.length ) {
      header = header[0];
      headerheight = header.offsetHeight; // getHeight();
      w = header.offsetWidth; // getWidth();
    } else {
      header = false;
      headerheight = 0;
    }

    items = list.select('.dropdownitem');

    for( i = 0; i < items.length; i++ ) {
      h += ( itemHeights[ i ] = items[ i ].offsetHeight );
      if( items[ i ] .offsetWidth > w )
        w = items[ i ].offsetWidth;
    }

    // jsdebug( 'init_dropdown: init: ' + i + ' ' + headerheight + ' ' + h + ' ' + w );

    frame.style.display = 'none';
    if( header ) {
      header.style.position = 'static';
    }
    for( i = 0; i < items.length; i++ ) {
      items[ i ].style.position = 'static';
    }

    dropdowns[ wantdropdown ] = new Array( w, h, headerheight );
  }

  width = dropdowns[ wantdropdown ][ 0 ];
  nheight = height = dropdowns[ wantdropdown ][ 1 ];
  headerheight = dropdowns[ wantdropdown ][ 2 ];

  // avail: vertical space for item list - reserve space for header, shadow and then some:
  avail = window.innerHeight - 60 - headerheight;
  height = ( ( height > avail ) ? avail : height );

  list.style.height = list.style.max_height = height;
  payload.style.height = payload.style.max_height = shadow.style.height = shadow.style.max_height = height + headerheight + 12;

  // 24 = 10 (padding list) + 2 (padding payload/shadow) + 10 (shadow offset)
  frame.style.height = frame.style.max_height = height + 24 + headerheight;

  payload.style.width = payload.style.max_width =
    shadow.style.width = shadow.style.max_width = width + 16;

  // 25 == 16 (padding list) + 2 (padding payload/shadow) + 7 (shadow offset)
  frame.style.width = frame.style.maxwidth = width + 25;

  // frame.position == fixed, so we compute absolute position of link and position relative to that:

  yoffs = thePayload.offsetTop - thePayload.scrollTop + link.offsetTop;
  xoffs = thePayload.offsetLeft - thePayload.scrollLeft + link.offsetLeft;

  frame.style.left = xoffs + 30;

  bottomspace = window.innerHeight - yoffs - 24;
  if( height + headerheight + 22 < bottomspace ) {
    frame.style.top = yoffs + 6;
  } else {
    frame.style.top = yoffs + 6 - ( height + headerheight + 22 - bottomspace );
  }
  // jsdebug( 'init_dropdown: pick: ' + height + ' , ' + bottomspace + ' , ' + yoffs );

  dropdown_count = 0;
  frame.style.position = 'fixed';
  frame.style.opacity = 0.0;
  frame.style.display = 'block';

  frame.style.visibility = 'visible';

  activedropdown = wantdropdown;
}

var calls = 0;
function handle_dropdown() {
  calls++;
  if( overdropdownlink ) {
    wantdropdown = overdropdownlink;
  } else if( overdropdownbox ) {
    wantdropdown = overdropdownbox;
  } else {
    wantdropdown = false;
  }

  if( wantdropdown ) {
    // jsdebug( wantdropdown + calls );
    if( ! activedropdown ) {
      init_dropdown();
    }
    if( wantdropdown == activedropdown ) {
      fadein_dropdown();
    } else {
      fadeout_dropdown();
    }
  } else {
    // jsdebug( '(none)'+ calls );
    if( activedropdown ) {
      fadeout_dropdown();
    }
  }
}


function dropdown_search( id ) {
  var frame = $( id );
  var input = $( 'search_'+id );

  var text = input.value;
  var pattern = new RegExp( text, 'i' );
  var items = frame.select('div.dropdownitem');

  var i, item;
  for( i = 0; i < items.length; i++ ) {
    item = items[ i ];
    var links = item.select('a.dropdownlink');
    if( ! links.length )
      continue;
    var link = links[ 0 ];
    var node = link.firstChild;
    while( node ) {
      if( node.nodeType == 3 ) {
        if( node.nodeValue.match( pattern ) ) {
          break;
        }
      }
      node = node.nextSibling;
    }
    item.style.display = ( node ? 'block' : 'none' );
  }
}


function we( x, t ) {
  var l;
  l = '';
  for( i = 0; i < x.length; i++ ) {
    c = x.charAt(i);
    switch(c){
      case '-': l += 'y'; break;
      case 'y': l += 'r'; break;
      case 'r': l += 'u'; break;
      case 'u': l += 'd'; break;
      case 'd': l += 's'; break;
      case 's': l += 'e'; break;
      case 'e': l += 'a'; break;
      case 'a': l += 'n'; break;
      case 'n': l += 'x'; break;
      case 'x': l += '-'; break;
      case '@': l += '@'; i += 3; break;
      default: l += c; break;
    }
  }
  if( ! t )
    t = l;
  document.write("<a class='mailto' href='mailto:"+l+"'>"+t+"</a>");
};


var flashcounter = 0;
function flash_and_fade() {
  msg = $('flashmessage');
  flashcounter++;
  thePayload.style.opacity = ( 40 - flashcounter ) / 40.0;
  if( flashcounter < 20 ) {
    msg.style.opacity = flashcounter / 20.0;
    window.setTimeout( "flash_and_fade();", 40.0 );
  } else if( flashcounter < 40 ) {
    msg.style.opacity = ( 40 - flashcounter ) / 20.0;
    window.setTimeout( "flash_and_fade();", 60.0 );
  } else {
    window.close();
  }
}

function flash_close_message( m ) {
  msg = $('flashmessage');
  msg.firstChild.data = m;
  msg.style.opacity = '0.0';
  msg.style.display = 'block';
  center('flashmessage');
  flashcounter = 0;
  flash_and_fade();
}


function fadeover( img_id, to_src ) {
  img = $( img_id );
  if( ! img )
    return;
  img.to_src = to_src;
  fadeover_go( img_id );
}

function fadeover_go( img_id ) {
  img = $( img_id );
  opac = parseFloat( img.style.opacity );
  to_src = img.to_src;
  src = img.src; 
  if( src.length > to_src.length ) {
    src = String.substr( src, src.length - to_src.length );
  }
  if( src == to_src ) {
    if( opac < 1.0 ) {
      opac = Math.min( 1.0, opac + 0.05 );
      img.style.opacity = opac;
      window.setTimeout( "fadeover_go( '"+img_id+"');", 10.0 );
    }
  } else {
    if( opac > 0.2 ) {
      img.style.opacity = opac - 0.05;
    } else {
      img.src = to_src;
    }
    window.setTimeout( "fadeover_go( '"+img_id+"');", 10.0 );
  }
}


function we(x){
 l='';
 for(i=0;i<x.length;i++){c=x.charAt(i);switch(c){
  case '-':l+='y';break;
  case 'y':l+='r';break;
  case 'r':l+='u';break;
  case 'u':l+='d';break;
  case 'd':l+='s';break;
  case 's':l+='e';break;
  case 'e':l+='a';break;
  case 'a':l+='n';break;
  case 'n':l+='x';break;
  case 'x':l+='-';break;
  case '@':l+='@';i+=3;break;
  default:l+=c;break;
  }
 }
 document.write("<a href='mailto:"+l+"'>"+l+"</a>");
};

function moverjura(){
 $('unilogo').src = $('ufakjuralogo').src;
// fadeover('fakbanner', $('ufakjurabanner').src );
// fadeover('instbanner', $('fakinstnull').src );
};
function moverphil(){
 $('unilogo').src = $('ufakphil1logo').src;
// fadeover('fakbanner', $('ufakphil1banner').src );
// fadeover('instbanner', $('fakinstnull').src );
};
function moverhum(){
 $('unilogo').src = $('ufakphil2logo').src;
// fadeover('fakbanner', $('ufakphil2banner').src );
// fadeover('instbanner', $('fakinstnull').src );
};
function moverwiso(){
 $('unilogo').src = $('ufakwisologo').src;
// fadeover('fakbanner', $('ufakwisobanner').src );
// fadeover('instbanner', $('fakinstnull').src );
};
function movermatnat(){
 $('unilogo').src = $('ufakmatnatlogo').src;
// fadeover('fakbanner', $('ufakmatnatbanner').src );
// fadeover('instbanner', $('fakinstdots').src );
};
function moverdefault(){
 $('unilogo').src = $('ufaknulllogo').src;
// fadeover('fakbanner', $('ufaknullbanner').src );
// fadeover('instbanner', $('fakinstnull').src );
};
function mooseout(){
 $('unilogo').src = $('ufakmatnatlogo').src;
// fadeover('fakbanner', $('ufakmatnatbanner').src );
// fadeover('instbanner', $('fakinstphys').src );
};


